name: Handle mod listing comments

on:
  issue_comment:
    types: [created]

permissions:
  contents: write  # для записи в _list.txt
  issues: write    # для редактирования комментариев

jobs:
  process_mod_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Parse comment body
        id: parse
        run: |
          body="${{ github.event.comment.body }}"
          # Проверяем формат user/repo
          if echo "$body" | grep -Eq '^[^/ ]+\/[^/ ]+$'; then
            echo "::set-output name=repo::$body"
          else
            echo "::set-output name=invalid_format::true"
          fi

      - name: Comment on invalid format
        if: steps.parse.outputs.invalid_format == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: replace
          body: |
              ```json
              "${{ github.event.comment.body }}" invalid format, use user/repo!
              ```

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify repository exists
        if: steps.parse.outputs.invalid_format != 'true'
        id: repo_check
        run: |
          if curl -sfI "https://github.com/${{ steps.parse.outputs.repo }}" >/dev/null; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi

      - name: Comment on non-existing repo
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: replace
          body: |
              ```json
              "${{ github.event.comment.body }}" repository not found.
              ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'true'
        uses: actions/checkout@v4

      - name: Check for duplicate entry
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'true'
        id: duplicate
        run: |
          if grep -xq "${{ steps.parse.outputs.repo }}" _list.txt; then
            echo "::set-output name=duplicate::true"
          else
            echo "::set-output name=duplicate::false"
          fi

      - name: Comment on duplicate
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'true' && steps.duplicate.outputs.duplicate == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: replace
          body: |
              ```json
              "${{ github.event.comment.body }}" already listed.
              ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Append to _list.txt and push
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'true' && steps.duplicate.outputs.duplicate == 'false'
        run: |
          echo "${{ steps.parse.outputs.repo }}" >> _list.txt
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add _list.txt
          git commit -m "Add ${{ steps.parse.outputs.repo }} to list"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on added
        if: steps.parse.outputs.invalid_format != 'true' && steps.repo_check.outputs.exists == 'true' && steps.duplicate.outputs.duplicate == 'false'
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          edit-mode: replace
          body: |
              ```lua
              "${{ github.event.comment.body }}" added!
              ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
